//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class ServiceBrokersEndpoint
{
        [TestMethod]
        public void RetrieveServiceBrokerTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""3f77c2e6-3e0a-466f-9325-6efefc46848a"",
    ""url"": ""/v2/service_brokers/96df6166-5c2d-4863-8b6d-35a06db61794"",
    ""created_at"": ""2016-04-11T13:33:00Z"",
    ""updated_at"": ""2016-04-11T13:33:00Z""
  },
  ""entity"": {
    ""name"": ""name-636"",
    ""broker_url"": ""https://foo.com/url-45"",
    ""auth_username"": ""auth_username-26"",
    ""space_guid"": ""3f77c2e6-3e0a-466f-9325-6efefc46848a""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.ServiceBrokers.RetrieveServiceBroker(guid).Result;


                Assert.AreEqual("3f77c2e6-3e0a-466f-9325-6efefc46848a", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_brokers/96df6166-5c2d-4863-8b6d-35a06db61794", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-04-11T13:33:00Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-04-11T13:33:00Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-636", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("https://foo.com/url-45", TestUtil.ToTestableString(obj.BrokerUrl), true);
                Assert.AreEqual("auth_username-26", TestUtil.ToTestableString(obj.AuthUsername), true);
                Assert.AreEqual("3f77c2e6-3e0a-466f-9325-6efefc46848a", TestUtil.ToTestableString(obj.SpaceGuid), true);

            }
        }

        [TestMethod]
        public void CreateServiceBrokerTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""57c4db32-62e5-4912-a7ae-c3f3b607d7bd"",
    ""created_at"": ""2016-04-11T13:33:00Z"",
    ""updated_at"": null,
    ""url"": ""/v2/service_brokers/7d2cb9f7-2275-45b4-8f29-ede07d3bb52b""
  },
  ""entity"": {
    ""name"": ""service-broker-name"",
    ""broker_url"": ""https://broker.example.com"",
    ""auth_username"": ""admin"",
    ""space_guid"": null
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateServiceBrokerRequest value = new CreateServiceBrokerRequest();


                var obj = cfClient.ServiceBrokers.CreateServiceBroker(value).Result;


                Assert.AreEqual("57c4db32-62e5-4912-a7ae-c3f3b607d7bd", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("2016-04-11T13:33:00Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("/v2/service_brokers/7d2cb9f7-2275-45b4-8f29-ede07d3bb52b", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("service-broker-name", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("https://broker.example.com", TestUtil.ToTestableString(obj.BrokerUrl), true);
                Assert.AreEqual("admin", TestUtil.ToTestableString(obj.AuthUsername), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceGuid), true);

            }
        }

        [TestMethod]
        public void DeleteServiceBrokerTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.ServiceBrokers.DeleteServiceBroker(guid).Wait();

            }
        }

        [TestMethod]
        public void ListAllServiceBrokersTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 3,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""b4e267ed-33dd-4d63-8413-988e6e6a1820"",
        ""url"": ""/v2/service_brokers/7a07168d-06d0-4580-a36b-06580c5f3782"",
        ""created_at"": ""2016-04-11T13:33:01Z"",
        ""updated_at"": ""2016-04-11T13:33:01Z""
      },
      ""entity"": {
        ""name"": ""name-654"",
        ""broker_url"": ""https://foo.com/url-54"",
        ""auth_username"": ""auth_username-35"",
        ""space_guid"": ""b4e267ed-33dd-4d63-8413-988e6e6a1820""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""b4e267ed-33dd-4d63-8413-988e6e6a1820"",
        ""url"": ""/v2/service_brokers/b0f96cdc-02ec-43c5-8bda-d154e1c1561a"",
        ""created_at"": ""2016-04-11T13:33:01Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-655"",
        ""broker_url"": ""https://foo.com/url-55"",
        ""auth_username"": ""auth_username-36"",
        ""space_guid"": null
      }
    },
    {
      ""metadata"": {
        ""guid"": ""b4e267ed-33dd-4d63-8413-988e6e6a1820"",
        ""url"": ""/v2/service_brokers/4b9a5d54-aa6f-492d-b959-674073adcec7"",
        ""created_at"": ""2016-04-11T13:33:01Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-656"",
        ""broker_url"": ""https://foo.com/url-56"",
        ""auth_username"": ""auth_username-37"",
        ""space_guid"": null
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.ServiceBrokers.ListAllServiceBrokers().Result;

                Assert.AreEqual("3", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("b4e267ed-33dd-4d63-8413-988e6e6a1820", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_brokers/7a07168d-06d0-4580-a36b-06580c5f3782", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-04-11T13:33:01Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-04-11T13:33:01Z", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-654", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("https://foo.com/url-54", TestUtil.ToTestableString(obj[0].BrokerUrl), true);
                Assert.AreEqual("auth_username-35", TestUtil.ToTestableString(obj[0].AuthUsername), true);
                Assert.AreEqual("b4e267ed-33dd-4d63-8413-988e6e6a1820", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("b4e267ed-33dd-4d63-8413-988e6e6a1820", TestUtil.ToTestableString(obj[1].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_brokers/b0f96cdc-02ec-43c5-8bda-d154e1c1561a", TestUtil.ToTestableString(obj[1].EntityMetadata.Url), true);
                Assert.AreEqual("2016-04-11T13:33:01Z", TestUtil.ToTestableString(obj[1].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-655", TestUtil.ToTestableString(obj[1].Name), true);
                Assert.AreEqual("https://foo.com/url-55", TestUtil.ToTestableString(obj[1].BrokerUrl), true);
                Assert.AreEqual("auth_username-36", TestUtil.ToTestableString(obj[1].AuthUsername), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].SpaceGuid), true);
                Assert.AreEqual("b4e267ed-33dd-4d63-8413-988e6e6a1820", TestUtil.ToTestableString(obj[2].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_brokers/4b9a5d54-aa6f-492d-b959-674073adcec7", TestUtil.ToTestableString(obj[2].EntityMetadata.Url), true);
                Assert.AreEqual("2016-04-11T13:33:01Z", TestUtil.ToTestableString(obj[2].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-656", TestUtil.ToTestableString(obj[2].Name), true);
                Assert.AreEqual("https://foo.com/url-56", TestUtil.ToTestableString(obj[2].BrokerUrl), true);
                Assert.AreEqual("auth_username-37", TestUtil.ToTestableString(obj[2].AuthUsername), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].SpaceGuid), true);

            }
        }

        [TestMethod]
        public void UpdateServiceBrokerTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""046b0a35-c413-4b4f-b992-92c208b58216"",
    ""created_at"": ""2016-04-11T13:33:01Z"",
    ""updated_at"": ""2016-04-11T13:33:01Z"",
    ""url"": ""/v2/service_brokers/60f9d4cf-05b1-49a6-8ddf-011f3a494018""
  },
  ""entity"": {
    ""name"": ""name-648"",
    ""broker_url"": ""https://mybroker.example.com"",
    ""auth_username"": ""admin-user"",
    ""space_guid"": ""046b0a35-c413-4b4f-b992-92c208b58216""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                UpdateServiceBrokerRequest value = new UpdateServiceBrokerRequest();


                var obj = cfClient.ServiceBrokers.UpdateServiceBroker(guid, value).Result;


                Assert.AreEqual("046b0a35-c413-4b4f-b992-92c208b58216", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("2016-04-11T13:33:01Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-04-11T13:33:01Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("/v2/service_brokers/60f9d4cf-05b1-49a6-8ddf-011f3a494018", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("name-648", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("https://mybroker.example.com", TestUtil.ToTestableString(obj.BrokerUrl), true);
                Assert.AreEqual("admin-user", TestUtil.ToTestableString(obj.AuthUsername), true);
                Assert.AreEqual("046b0a35-c413-4b4f-b992-92c208b58216", TestUtil.ToTestableString(obj.SpaceGuid), true);

            }
        }

    }
}