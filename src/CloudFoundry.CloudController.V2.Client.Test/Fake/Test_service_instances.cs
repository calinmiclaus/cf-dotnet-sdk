//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class ServiceInstancesEndpoint
{
        [TestMethod]
        public void RetrievingPermissionsOnServiceInstanceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""manage"": true
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.ServiceInstances.RetrievingPermissionsOnServiceInstance(guid).Result;


                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Manage), true);

            }
        }

        [TestMethod]
        public void DeleteServiceInstanceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""e624bf37-fc6f-4f31-9528-82bf2621172b"",
    ""url"": ""/v2/service_instances/4c153b39-b010-4eb8-9144-3778dc09e12a"",
    ""created_at"": ""2016-04-11T13:32:33Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-112"",
    ""credentials"": {
      ""creds-key-3"": ""creds-val-3""
    },
    ""service_plan_guid"": ""e624bf37-fc6f-4f31-9528-82bf2621172b"",
    ""space_guid"": ""e624bf37-fc6f-4f31-9528-82bf2621172b"",
    ""gateway_data"": null,
    ""dashboard_url"": null,
    ""type"": ""managed_service_instance"",
    ""last_operation"": {
      ""type"": ""delete"",
      ""state"": ""in progress"",
      ""description"": """",
      ""updated_at"": ""2016-04-11T13:32:33Z"",
      ""created_at"": ""2016-04-11T13:32:33Z""
    },
    ""tags"": [
      ""accounting"",
      ""mongodb""
    ],
    ""space_url"": ""/v2/spaces/6d718cca-4af9-4d39-b8b3-8a1ecb4ad73d"",
    ""service_plan_url"": ""/v2/service_plans/54ba0eed-ecde-4ccc-9203-b0ebb3a1e1f9"",
    ""service_bindings_url"": ""/v2/service_instances/4c153b39-b010-4eb8-9144-3778dc09e12a/service_bindings"",
    ""service_keys_url"": ""/v2/service_instances/4c153b39-b010-4eb8-9144-3778dc09e12a/service_keys"",
    ""routes_url"": ""/v2/service_instances/4c153b39-b010-4eb8-9144-3778dc09e12a/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)202;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.ServiceInstances.DeleteServiceInstance(guid).Result;


                Assert.AreEqual("e624bf37-fc6f-4f31-9528-82bf2621172b", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_instances/4c153b39-b010-4eb8-9144-3778dc09e12a", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-04-11T13:32:33Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-112", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("e624bf37-fc6f-4f31-9528-82bf2621172b", TestUtil.ToTestableString(obj.ServicePlanGuid), true);
                Assert.AreEqual("e624bf37-fc6f-4f31-9528-82bf2621172b", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DashboardUrl), true);
                Assert.AreEqual("managed_service_instance", TestUtil.ToTestableString(obj.Type), true);
                Assert.AreEqual("/v2/spaces/6d718cca-4af9-4d39-b8b3-8a1ecb4ad73d", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/service_plans/54ba0eed-ecde-4ccc-9203-b0ebb3a1e1f9", TestUtil.ToTestableString(obj.ServicePlanUrl), true);
                Assert.AreEqual("/v2/service_instances/4c153b39-b010-4eb8-9144-3778dc09e12a/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/service_instances/4c153b39-b010-4eb8-9144-3778dc09e12a/service_keys", TestUtil.ToTestableString(obj.ServiceKeysUrl), true);
                Assert.AreEqual("/v2/service_instances/4c153b39-b010-4eb8-9144-3778dc09e12a/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllServiceBindingsForServiceInstanceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""b10efc31-1174-419d-a864-a4ee985f5a1a"",
        ""url"": ""/v2/service_bindings/f4b7d3c0-f44c-4f41-b575-28a2d08b51bf"",
        ""created_at"": ""2016-04-11T13:32:34Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""app_guid"": ""b10efc31-1174-419d-a864-a4ee985f5a1a"",
        ""service_instance_guid"": ""b10efc31-1174-419d-a864-a4ee985f5a1a"",
        ""credentials"": {
          ""creds-key-9"": ""creds-val-9""
        },
        ""binding_options"": {

        },
        ""gateway_data"": null,
        ""gateway_name"": """",
        ""syslog_drain_url"": null,
        ""app_url"": ""/v2/apps/834edb18-b0a1-4bbb-b524-07d38aa34591"",
        ""service_instance_url"": ""/v2/service_instances/5552e0a4-f0db-4d20-a3b9-9e04bb993d6d""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.ServiceInstances.ListAllServiceBindingsForServiceInstance(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("b10efc31-1174-419d-a864-a4ee985f5a1a", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_bindings/f4b7d3c0-f44c-4f41-b575-28a2d08b51bf", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-04-11T13:32:34Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("b10efc31-1174-419d-a864-a4ee985f5a1a", TestUtil.ToTestableString(obj[0].AppGuid), true);
                Assert.AreEqual("b10efc31-1174-419d-a864-a4ee985f5a1a", TestUtil.ToTestableString(obj[0].ServiceInstanceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].GatewayName), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].SyslogDrainUrl), true);
                Assert.AreEqual("/v2/apps/834edb18-b0a1-4bbb-b524-07d38aa34591", TestUtil.ToTestableString(obj[0].AppUrl), true);
                Assert.AreEqual("/v2/service_instances/5552e0a4-f0db-4d20-a3b9-9e04bb993d6d", TestUtil.ToTestableString(obj[0].ServiceInstanceUrl), true);

            }
        }

        [TestMethod]
        public void ListAllServiceInstancesTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""0385491a-efaa-4316-b648-0f37212c6131"",
        ""url"": ""/v2/service_instances/a5cc0c6e-625a-4520-8092-131c33a1e5b3"",
        ""created_at"": ""2016-04-11T13:32:34Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-127"",
        ""credentials"": {
          ""creds-key-5"": ""creds-val-5""
        },
        ""service_plan_guid"": ""0385491a-efaa-4316-b648-0f37212c6131"",
        ""space_guid"": ""0385491a-efaa-4316-b648-0f37212c6131"",
        ""gateway_data"": null,
        ""dashboard_url"": null,
        ""type"": ""managed_service_instance"",
        ""last_operation"": {
          ""type"": ""create"",
          ""state"": ""succeeded"",
          ""description"": ""service broker-provided description"",
          ""updated_at"": ""2016-04-11T13:32:34Z"",
          ""created_at"": ""2016-04-11T13:32:34Z""
        },
        ""tags"": [
          ""accounting"",
          ""mongodb""
        ],
        ""space_url"": ""/v2/spaces/38efe4fa-7f7b-42f1-9854-e6f413aab487"",
        ""service_plan_url"": ""/v2/service_plans/94974dd7-9fe9-4d35-8a25-ea661645dc9b"",
        ""service_bindings_url"": ""/v2/service_instances/a5cc0c6e-625a-4520-8092-131c33a1e5b3/service_bindings"",
        ""service_keys_url"": ""/v2/service_instances/a5cc0c6e-625a-4520-8092-131c33a1e5b3/service_keys"",
        ""routes_url"": ""/v2/service_instances/a5cc0c6e-625a-4520-8092-131c33a1e5b3/routes""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.ServiceInstances.ListAllServiceInstances().Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("0385491a-efaa-4316-b648-0f37212c6131", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_instances/a5cc0c6e-625a-4520-8092-131c33a1e5b3", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-04-11T13:32:34Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-127", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("0385491a-efaa-4316-b648-0f37212c6131", TestUtil.ToTestableString(obj[0].ServicePlanGuid), true);
                Assert.AreEqual("0385491a-efaa-4316-b648-0f37212c6131", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DashboardUrl), true);
                Assert.AreEqual("managed_service_instance", TestUtil.ToTestableString(obj[0].Type), true);
                Assert.AreEqual("/v2/spaces/38efe4fa-7f7b-42f1-9854-e6f413aab487", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/service_plans/94974dd7-9fe9-4d35-8a25-ea661645dc9b", TestUtil.ToTestableString(obj[0].ServicePlanUrl), true);
                Assert.AreEqual("/v2/service_instances/a5cc0c6e-625a-4520-8092-131c33a1e5b3/service_bindings", TestUtil.ToTestableString(obj[0].ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/service_instances/a5cc0c6e-625a-4520-8092-131c33a1e5b3/service_keys", TestUtil.ToTestableString(obj[0].ServiceKeysUrl), true);
                Assert.AreEqual("/v2/service_instances/a5cc0c6e-625a-4520-8092-131c33a1e5b3/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);

            }
        }

        [TestMethod]
        public void BindingServiceInstanceToRouteTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""c12672a3-e882-44a3-a3d3-107b698b8854"",
    ""url"": ""/v2/service_instances/ba82b8f0-1003-4eae-8478-99d9e58bfc39"",
    ""created_at"": ""2016-04-11T13:32:35Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-166"",
    ""credentials"": {
      ""creds-key-12"": ""creds-val-12""
    },
    ""service_plan_guid"": ""c12672a3-e882-44a3-a3d3-107b698b8854"",
    ""space_guid"": ""c12672a3-e882-44a3-a3d3-107b698b8854"",
    ""gateway_data"": null,
    ""dashboard_url"": null,
    ""type"": ""managed_service_instance"",
    ""last_operation"": null,
    ""tags"": [

    ],
    ""space_url"": ""/v2/spaces/b8ad26a6-3476-446d-a8cf-94c53ccdb71c"",
    ""service_plan_url"": ""/v2/service_plans/8da77576-8adb-43d6-b4b9-ebf8e359ffd9"",
    ""service_bindings_url"": ""/v2/service_instances/ba82b8f0-1003-4eae-8478-99d9e58bfc39/service_bindings"",
    ""service_keys_url"": ""/v2/service_instances/ba82b8f0-1003-4eae-8478-99d9e58bfc39/service_keys"",
    ""routes_url"": ""/v2/service_instances/ba82b8f0-1003-4eae-8478-99d9e58bfc39/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? service_instance_guid = Guid.NewGuid();

                Guid? route_guid = Guid.NewGuid();

                BindingServiceInstanceToRouteRequest value = new BindingServiceInstanceToRouteRequest();


                var obj = cfClient.ServiceInstances.BindingServiceInstanceToRoute(service_instance_guid, route_guid, value).Result;


                Assert.AreEqual("c12672a3-e882-44a3-a3d3-107b698b8854", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_instances/ba82b8f0-1003-4eae-8478-99d9e58bfc39", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-04-11T13:32:35Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-166", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("c12672a3-e882-44a3-a3d3-107b698b8854", TestUtil.ToTestableString(obj.ServicePlanGuid), true);
                Assert.AreEqual("c12672a3-e882-44a3-a3d3-107b698b8854", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DashboardUrl), true);
                Assert.AreEqual("managed_service_instance", TestUtil.ToTestableString(obj.Type), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.LastOperation), true);
                Assert.AreEqual("/v2/spaces/b8ad26a6-3476-446d-a8cf-94c53ccdb71c", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/service_plans/8da77576-8adb-43d6-b4b9-ebf8e359ffd9", TestUtil.ToTestableString(obj.ServicePlanUrl), true);
                Assert.AreEqual("/v2/service_instances/ba82b8f0-1003-4eae-8478-99d9e58bfc39/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/service_instances/ba82b8f0-1003-4eae-8478-99d9e58bfc39/service_keys", TestUtil.ToTestableString(obj.ServiceKeysUrl), true);
                Assert.AreEqual("/v2/service_instances/ba82b8f0-1003-4eae-8478-99d9e58bfc39/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void UnbindingServiceInstanceFromRouteTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? service_instance_guid = Guid.NewGuid();

                Guid? route_guid = Guid.NewGuid();


                cfClient.ServiceInstances.UnbindingServiceInstanceFromRoute(service_instance_guid, route_guid).Wait();

            }
        }

        [TestMethod]
        public void CreateServiceInstanceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""e0c4cb73-c6e8-4d99-a953-c95782c78d5d"",
    ""url"": ""/v2/service_instances/f2cda3a5-6700-4a59-ac24-8ae1ee503d35"",
    ""created_at"": ""2016-04-11T13:32:34Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""my-service-instance"",
    ""credentials"": {

    },
    ""service_plan_guid"": ""e0c4cb73-c6e8-4d99-a953-c95782c78d5d"",
    ""space_guid"": ""e0c4cb73-c6e8-4d99-a953-c95782c78d5d"",
    ""gateway_data"": null,
    ""dashboard_url"": null,
    ""type"": ""managed_service_instance"",
    ""last_operation"": {
      ""type"": ""create"",
      ""state"": ""in progress"",
      ""description"": """",
      ""updated_at"": null,
      ""created_at"": ""2016-04-11T13:32:34Z""
    },
    ""tags"": [
      ""accounting"",
      ""mongodb""
    ],
    ""space_url"": ""/v2/spaces/0dbe272f-5b23-4796-92b8-3dec830bbc41"",
    ""service_plan_url"": ""/v2/service_plans/67622290-a43c-47b0-a908-1a8bc0d09040"",
    ""service_bindings_url"": ""/v2/service_instances/f2cda3a5-6700-4a59-ac24-8ae1ee503d35/service_bindings"",
    ""service_keys_url"": ""/v2/service_instances/f2cda3a5-6700-4a59-ac24-8ae1ee503d35/service_keys"",
    ""routes_url"": ""/v2/service_instances/f2cda3a5-6700-4a59-ac24-8ae1ee503d35/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)202;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateServiceInstanceRequest value = new CreateServiceInstanceRequest();


                var obj = cfClient.ServiceInstances.CreateServiceInstance(value).Result;


                Assert.AreEqual("e0c4cb73-c6e8-4d99-a953-c95782c78d5d", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_instances/f2cda3a5-6700-4a59-ac24-8ae1ee503d35", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-04-11T13:32:34Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("my-service-instance", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("e0c4cb73-c6e8-4d99-a953-c95782c78d5d", TestUtil.ToTestableString(obj.ServicePlanGuid), true);
                Assert.AreEqual("e0c4cb73-c6e8-4d99-a953-c95782c78d5d", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DashboardUrl), true);
                Assert.AreEqual("managed_service_instance", TestUtil.ToTestableString(obj.Type), true);
                Assert.AreEqual("/v2/spaces/0dbe272f-5b23-4796-92b8-3dec830bbc41", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/service_plans/67622290-a43c-47b0-a908-1a8bc0d09040", TestUtil.ToTestableString(obj.ServicePlanUrl), true);
                Assert.AreEqual("/v2/service_instances/f2cda3a5-6700-4a59-ac24-8ae1ee503d35/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/service_instances/f2cda3a5-6700-4a59-ac24-8ae1ee503d35/service_keys", TestUtil.ToTestableString(obj.ServiceKeysUrl), true);
                Assert.AreEqual("/v2/service_instances/f2cda3a5-6700-4a59-ac24-8ae1ee503d35/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void RetrieveServiceInstanceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""0a708de2-5438-4852-8fc3-4c94c75b587e"",
    ""url"": ""/v2/service_instances/112418b9-f0ec-484d-8c46-824c996985d8"",
    ""created_at"": ""2016-04-11T13:32:33Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-106"",
    ""credentials"": {
      ""creds-key-2"": ""creds-val-2""
    },
    ""service_plan_guid"": ""0a708de2-5438-4852-8fc3-4c94c75b587e"",
    ""space_guid"": ""0a708de2-5438-4852-8fc3-4c94c75b587e"",
    ""gateway_data"": null,
    ""dashboard_url"": null,
    ""type"": ""managed_service_instance"",
    ""last_operation"": {
      ""type"": ""create"",
      ""state"": ""succeeded"",
      ""description"": ""service broker-provided description"",
      ""updated_at"": ""2016-04-11T13:32:33Z"",
      ""created_at"": ""2016-04-11T13:32:33Z""
    },
    ""tags"": [
      ""accounting"",
      ""mongodb""
    ],
    ""space_url"": ""/v2/spaces/454a2146-4706-4ffc-8599-9a464350e04d"",
    ""service_plan_url"": ""/v2/service_plans/9d1630f3-c9df-4d1c-b63b-abc3d85a5b15"",
    ""service_bindings_url"": ""/v2/service_instances/112418b9-f0ec-484d-8c46-824c996985d8/service_bindings"",
    ""service_keys_url"": ""/v2/service_instances/112418b9-f0ec-484d-8c46-824c996985d8/service_keys"",
    ""routes_url"": ""/v2/service_instances/112418b9-f0ec-484d-8c46-824c996985d8/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.ServiceInstances.RetrieveServiceInstance(guid).Result;


                Assert.AreEqual("0a708de2-5438-4852-8fc3-4c94c75b587e", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_instances/112418b9-f0ec-484d-8c46-824c996985d8", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-04-11T13:32:33Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-106", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("0a708de2-5438-4852-8fc3-4c94c75b587e", TestUtil.ToTestableString(obj.ServicePlanGuid), true);
                Assert.AreEqual("0a708de2-5438-4852-8fc3-4c94c75b587e", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DashboardUrl), true);
                Assert.AreEqual("managed_service_instance", TestUtil.ToTestableString(obj.Type), true);
                Assert.AreEqual("/v2/spaces/454a2146-4706-4ffc-8599-9a464350e04d", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/service_plans/9d1630f3-c9df-4d1c-b63b-abc3d85a5b15", TestUtil.ToTestableString(obj.ServicePlanUrl), true);
                Assert.AreEqual("/v2/service_instances/112418b9-f0ec-484d-8c46-824c996985d8/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/service_instances/112418b9-f0ec-484d-8c46-824c996985d8/service_keys", TestUtil.ToTestableString(obj.ServiceKeysUrl), true);
                Assert.AreEqual("/v2/service_instances/112418b9-f0ec-484d-8c46-824c996985d8/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void UpdateServiceInstanceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""7669e874-9402-4cf5-acd7-2a47b078ad99"",
    ""url"": ""/v2/service_instances/35e2ee3d-55f0-4dbe-afc4-190a948421a7"",
    ""created_at"": ""2016-04-11T13:32:34Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-133"",
    ""credentials"": {
      ""creds-key-6"": ""creds-val-6""
    },
    ""service_plan_guid"": ""7669e874-9402-4cf5-acd7-2a47b078ad99"",
    ""space_guid"": ""7669e874-9402-4cf5-acd7-2a47b078ad99"",
    ""gateway_data"": null,
    ""dashboard_url"": null,
    ""type"": ""managed_service_instance"",
    ""last_operation"": {
      ""type"": ""update"",
      ""state"": ""in progress"",
      ""description"": """",
      ""updated_at"": ""2016-04-11T13:32:34Z"",
      ""created_at"": ""2016-04-11T13:32:34Z""
    },
    ""tags"": [

    ],
    ""space_url"": ""/v2/spaces/6f3d5d0d-5134-496d-a9e5-bf6acb8b216f"",
    ""service_plan_url"": ""/v2/service_plans/14f6c12c-7540-44bf-9456-f6f3a97b3968"",
    ""service_bindings_url"": ""/v2/service_instances/35e2ee3d-55f0-4dbe-afc4-190a948421a7/service_bindings"",
    ""service_keys_url"": ""/v2/service_instances/35e2ee3d-55f0-4dbe-afc4-190a948421a7/service_keys"",
    ""routes_url"": ""/v2/service_instances/35e2ee3d-55f0-4dbe-afc4-190a948421a7/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)202;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                UpdateServiceInstanceRequest value = new UpdateServiceInstanceRequest();


                var obj = cfClient.ServiceInstances.UpdateServiceInstance(guid, value).Result;


                Assert.AreEqual("7669e874-9402-4cf5-acd7-2a47b078ad99", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_instances/35e2ee3d-55f0-4dbe-afc4-190a948421a7", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-04-11T13:32:34Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-133", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("7669e874-9402-4cf5-acd7-2a47b078ad99", TestUtil.ToTestableString(obj.ServicePlanGuid), true);
                Assert.AreEqual("7669e874-9402-4cf5-acd7-2a47b078ad99", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DashboardUrl), true);
                Assert.AreEqual("managed_service_instance", TestUtil.ToTestableString(obj.Type), true);
                Assert.AreEqual("/v2/spaces/6f3d5d0d-5134-496d-a9e5-bf6acb8b216f", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/service_plans/14f6c12c-7540-44bf-9456-f6f3a97b3968", TestUtil.ToTestableString(obj.ServicePlanUrl), true);
                Assert.AreEqual("/v2/service_instances/35e2ee3d-55f0-4dbe-afc4-190a948421a7/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/service_instances/35e2ee3d-55f0-4dbe-afc4-190a948421a7/service_keys", TestUtil.ToTestableString(obj.ServiceKeysUrl), true);
                Assert.AreEqual("/v2/service_instances/35e2ee3d-55f0-4dbe-afc4-190a948421a7/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllRoutesForServiceInstanceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""ded12e9c-7237-4a7c-a582-7490c54280f6"",
        ""url"": ""/v2/routes/948cff3e-0c5d-4856-945d-aa968fd67644"",
        ""created_at"": ""2016-04-11T13:32:34Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""host"": ""host-2"",
        ""path"": """",
        ""domain_guid"": ""ded12e9c-7237-4a7c-a582-7490c54280f6"",
        ""space_guid"": ""ded12e9c-7237-4a7c-a582-7490c54280f6"",
        ""service_instance_guid"": ""ded12e9c-7237-4a7c-a582-7490c54280f6"",
        ""port"": 0,
        ""domain_url"": ""/v2/domains/70ae3175-4209-418d-9b35-e2142f005b7a"",
        ""space_url"": ""/v2/spaces/280daef6-c9f6-4573-b067-b30a25f86c9c"",
        ""service_instance_url"": ""/v2/service_instances/dc943f37-fa1d-490e-aa07-d6581ab719e7"",
        ""apps_url"": ""/v2/routes/948cff3e-0c5d-4856-945d-aa968fd67644/apps"",
        ""route_mappings_url"": ""/v2/routes/948cff3e-0c5d-4856-945d-aa968fd67644/route_mappings""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.ServiceInstances.ListAllRoutesForServiceInstance(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("ded12e9c-7237-4a7c-a582-7490c54280f6", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/routes/948cff3e-0c5d-4856-945d-aa968fd67644", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-04-11T13:32:34Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("host-2", TestUtil.ToTestableString(obj[0].Host), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Path), true);
                Assert.AreEqual("ded12e9c-7237-4a7c-a582-7490c54280f6", TestUtil.ToTestableString(obj[0].DomainGuid), true);
                Assert.AreEqual("ded12e9c-7237-4a7c-a582-7490c54280f6", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("ded12e9c-7237-4a7c-a582-7490c54280f6", TestUtil.ToTestableString(obj[0].ServiceInstanceGuid), true);
                Assert.AreEqual("0", TestUtil.ToTestableString(obj[0].Port), true);
                Assert.AreEqual("/v2/domains/70ae3175-4209-418d-9b35-e2142f005b7a", TestUtil.ToTestableString(obj[0].DomainUrl), true);
                Assert.AreEqual("/v2/spaces/280daef6-c9f6-4573-b067-b30a25f86c9c", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/service_instances/dc943f37-fa1d-490e-aa07-d6581ab719e7", TestUtil.ToTestableString(obj[0].ServiceInstanceUrl), true);
                Assert.AreEqual("/v2/routes/948cff3e-0c5d-4856-945d-aa968fd67644/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);
                Assert.AreEqual("/v2/routes/948cff3e-0c5d-4856-945d-aa968fd67644/route_mappings", TestUtil.ToTestableString(obj[0].RouteMappingsUrl), true);

            }
        }

    }
}